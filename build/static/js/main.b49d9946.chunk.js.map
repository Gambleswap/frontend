{"version":3,"sources":["util/interact.js","tokenTransfer.js","ubc-logo.png","App.js","reportWebVitals.js","index.js"],"names":["require","config","Web3","web3","providers","HttpProvider","GMBContractABI","GMBContractAddress","GamblingContractABI","GMBTokenContract","eth","Contract","GamblingContract","loadTokenName","a","methods","name","call","tokenName","loadCoveragePerGMB","getCurrentRound","loadRoundNum","getCurrentRoundCoveragePerGMB","loadTokenAccountBalance","account","balanceOf","balance","connectWallet","window","ethereum","request","method","addressArray","obj","status","address","message","target","href","getCurrentWalletConnected","length","participate","fromAddress","betValue","gmbToken","trim","transactionParameters","to","from","data","encodeABI","params","txHash","TokenTransfer","useState","walletAddress","setWallet","setStatus","setBetValue","GMBToken","setGMBToken","setTokenName","tokenBalance","settokenBalance","coveragePerGMB","setCoveragePerGMB","roundNum","setRoundNum","addWalletListener","on","accounts","useEffect","fetchData","handleParticipation","res","connectWalletPressed","walletResponse","id","String","substring","onClick","style","paddingTop","type","value","onChange","e","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b49d9946.chunk.js","sourcesContent":["require(\"dotenv\").config();\nconst Web3 = require(\"web3\")\n\n// const alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\n// const { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = new Web3(new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\"))\n\nconst GMBContractABI = require(\"../GMBToken-abi.json\");\nconst GMBContractAddress = \"0x948B3c65b89DF0B4894ABE91E6D02FE579834F8F\";\n\nconst GamblingContractABI = require(\"../GamblingToken-abi.json\");\nconst GamblingContractAddress = \"0xe6b98F104c1BEf218F3893ADab4160Dc73Eb8367\";\n\n\nexport const GMBTokenContract = new web3.eth.Contract(\n\tGMBContractABI,\n\tGMBContractAddress\n);\n\nexport const GamblingContract = new web3.eth.Contract(\n\tGamblingContractABI,\n\tGamblingContractAddress\n);\n\nexport const loadTokenName = async () => {\n\tconst tokenName = await GMBTokenContract.methods.name().call();\n\treturn tokenName;\n};\n\nexport const loadCoveragePerGMB = async () => {\n\treturn await GamblingContract.methods.getCurrentRound().call();\n};\n\nexport const loadRoundNum = async () => {\n\treturn await GamblingContract.methods.getCurrentRoundCoveragePerGMB().call();\n};\n\nexport const loadTokenAccountBalance = async (account) => {\n\tconst balance = await GMBTokenContract.methods.balanceOf(account).call();\n\treturn +balance / 10 ** 18;\n};\n\nexport const connectWallet = async () => {\n\tif (window.ethereum) {\n\t\ttry {\n\t\t\tconst addressArray = await window.ethereum.request({\n\t\t\t\tmethod: \"eth_requestAccounts\",\n\t\t\t});\n\t\t\tconst obj = {\n\t\t\t\tstatus: \"👆🏽 input the transfer to addresst in the text-field above.\",\n\t\t\t\taddress: addressArray[0],\n\t\t\t};\n\t\t\treturn obj;\n\t\t} catch (err) {\n\t\t\treturn {\n\t\t\t\taddress: \"\",\n\t\t\t\tstatus: \"😥 \" + err.message,\n\t\t\t};\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\taddress: \"\",\n\t\t\tstatus: (\n\t\t\t\t<span>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t🦊{\" \"}\n\t\t\t\t\t\t<a target=\"_blank\" href={`https://metamask.io/download.html`}>\n\t\t\t\t\t\t\tYou must install Metamask, a virtual Ethereum wallet, in your\n\t\t\t\t\t\t\tbrowser.\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</p>\n\t\t\t\t</span>\n\t\t\t),\n\t\t};\n\t}\n};\n\nexport const getCurrentWalletConnected = async () => {\n\tif (window.ethereum) {\n\t\ttry {\n\t\t\tconst addressArray = await window.ethereum.request({\n\t\t\t\tmethod: \"eth_accounts\",\n\t\t\t});\n\t\t\tif (addressArray.length > 0) {\n\t\t\t\treturn {\n\t\t\t\t\taddress: addressArray[0],\n\t\t\t\t\tstatus: \"👆🏽 input the transfer to addresst in the text-field above.\",\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\taddress: \"\",\n\t\t\t\t\tstatus: \"🦊 Connect to Metamask using the top right button.\",\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (err) {\n\t\t\treturn {\n\t\t\t\taddress: \"\",\n\t\t\t\tstatus: \"😥 \" + err.message,\n\t\t\t};\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\taddress: \"\",\n\t\t\tstatus: (\n\t\t\t\t<span>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t🦊{\" \"}\n\t\t\t\t\t\t<a target=\"_blank\" href={`https://metamask.io/download.html`}>\n\t\t\t\t\t\t\tYou must install Metamask, a virtual Ethereum wallet, in your\n\t\t\t\t\t\t\tbrowser.\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</p>\n\t\t\t\t</span>\n\t\t\t),\n\t\t};\n\t}\n};\n\nexport const participate = async (fromAddress, betValue, gmbToken) => {\n\t//input error handling\n\tif (!window.ethereum || fromAddress === null) {\n\t\treturn {\n\t\t\tstatus:\n\t\t\t\t\"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n\t\t};\n\t}\n\n\tif (betValue.trim() === \"\" || gmbToken.trim() === \"\") {\n\t\treturn {\n\t\t\tstatus: \"❌ Your message cannot be an empty string.\",\n\t\t};\n\t}\n\n\tconst transactionParameters = {\n\t\tto: GMBContractAddress, // Required except during contract publications.\n\t\tfrom: fromAddress, // must match user's active address.\n\t\tdata: GamblingContract.methods.participate(gmbToken, betValue).encodeABI(),\n\t};\n\n\t//sign the transaction\n\ttry {\n\t\tconst txHash = await window.ethereum.request({\n\t\t\tmethod: \"eth_sendTransaction\",\n\t\t\tparams: [transactionParameters],\n\t\t});\n\t\treturn {\n\t\t\tstatus: (\n\t\t\t\t<span>\n\t\t\t\t\t✅{\" \"}\n\t\t\t\t\t<a target=\"_blank\" href={`https://rinkeby.etherscan.io/tx/${txHash}`}>\n\t\t\t\t\t\tView the status of your transaction on Etherscan!\n\t\t\t\t\t</a>\n\t\t\t\t</span>\n\t\t\t),\n\t\t};\n\t} catch (error) {\n\t\treturn {\n\t\t\tstatus: \"😥 \" + error.message,\n\t\t};\n\t}\n};\n\n\n// export const transferToken = async (fromAddress, toAddress) => {\n// \tlet value = (10 ** 18).toFixed(0);\n// \tconsole.log(value);\n// \t//input error handling\n// \tif (!window.ethereum || fromAddress === null) {\n// \t\treturn {\n// \t\t\tstatus:\n// \t\t\t\t\"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n// \t\t};\n// \t}\n\n// \tif (toAddress.trim() === \"\") {\n// \t\treturn {\n// \t\t\tstatus: \"❌ Your message cannot be an empty string.\",\n// \t\t};\n// \t}\n\n// \t// //set up transaction parameters\n// \tconst transactionParameters = {\n// \t\tto: GMBContractAddress, // Required except during contract publications.\n// \t\tfrom: fromAddress, // must match user's active address.\n// \t\tdata: GMBTokenContract.methods.transfer(toAddress, value).encodeABI(),\n// \t};\n\n// \t//sign the transaction\n// \ttry {\n// \t\tconst txHash = await window.ethereum.request({\n// \t\t\tmethod: \"eth_sendTransaction\",\n// \t\t\tparams: [transactionParameters],\n// \t\t});\n// \t\treturn {\n// \t\t\tstatus: (\n// \t\t\t\t<span>\n// \t\t\t\t\t✅{\" \"}\n// \t\t\t\t\t<a target=\"_blank\" href={`https://rinkeby.etherscan.io/tx/${txHash}`}>\n// \t\t\t\t\t\tView the status of your transaction on Etherscan!\n// \t\t\t\t\t</a>\n// \t\t\t\t\t<br />\n// \t\t\t\t\tℹ️ Once the transaction is verified by the network, the token balance\n// \t\t\t\t\twill be updated automatically.\n// \t\t\t\t</span>\n// \t\t\t),\n// \t\t};\n// \t} catch (error) {\n// \t\treturn {\n// \t\t\tstatus: \"😥 \" + error.message,\n// \t\t};\n// \t}\n// };\n","import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport {\n\tGMBTokenContract,\n\tconnectWallet,\n\tparticipate,\n\tloadTokenName,\n\tloadTokenAccountBalance,\n\tgetCurrentWalletConnected,\n\tloadCoveragePerGMB,\n\tloadRoundNum,\n} from \"./util/interact.js\";\n\nimport Ubclogo from \"./ubc-logo.png\";\n\nconst TokenTransfer = () => {\n\t//state variables\n\tconst [walletAddress, setWallet] = useState(\"\");\n\tconst [status, setStatus] = useState(\"\");\n\tconst [betValue, setBetValue] = useState(\"\");\n\tconst [GMBToken, setGMBToken] = useState(\"\");\n\n\tconst [tokenName, setTokenName] = useState(\"No connection to the network.\"); //default tokenName\n\tconst [tokenBalance, settokenBalance] = useState(\n\t\t\"No connection to the network.\"\n\t);\n\tconst [coveragePerGMB, setCoveragePerGMB] = useState(\n\t\t\"No connection to the network.\"\n\t);\n\tconst [roundNum, setRoundNum] = useState(\n\t\t\"No connection to the network.\"\n\t);\n\n\n\tconst [toAddress, setToAddress] = useState(\"\");\n\n\t//called only once\n\tuseEffect(() => {\n\t\tasync function fetchData() {\n\t\t\tif (walletAddress !== \"\") {\n\t\t\t\tconst tokenBalance = await loadTokenAccountBalance(walletAddress);\n\t\t\t\tsettokenBalance(tokenBalance);\n\t\t\t}\n\t\t\tconst tokenName = await loadTokenName();\n\t\t\tsetTokenName(tokenName);\n\t\t\tconst coveragePerGMB = await loadCoveragePerGMB();\n\t\t\tsetCoveragePerGMB(coveragePerGMB);\n\t\t\tconst roundNum = await loadRoundNum();\n\t\t\tsetRoundNum(roundNum);\n\t\t\tconst { address, status } = await getCurrentWalletConnected();\n\t\t\tsetWallet(address);\n\t\t\tsetStatus(status);\n\t\t\taddWalletListener();\n\t\t}\n\t\tfetchData();\n\t}, [walletAddress, tokenBalance]);\n\n\tfunction addWalletListener() {\n\t\tif (window.ethereum) {\n\t\t\twindow.ethereum.on(\"accountsChanged\", (accounts) => {\n\t\t\t\tif (accounts.length > 0) {\n\t\t\t\t\tsetWallet(accounts[0]);\n\t\t\t\t} else {\n\t\t\t\t\tsetWallet(\"\");\n\t\t\t\t\tsetStatus(\"🦊 Connect to Metamask using the top right button.\");\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tsetStatus(\n\t\t\t\t<p>\n\t\t\t\t\t{\" \"}\n\t\t\t\t\t🦊{\" \"}\n\t\t\t\t\t<a target=\"_blank\" href={`https://metamask.io/download.html`}>\n\t\t\t\t\t\tYou must install Metamask, a virtual Ethereum wallet, in your\n\t\t\t\t\t\tbrowser.\n\t\t\t\t\t</a>\n\t\t\t\t</p>\n\t\t\t);\n\t\t}\n\t}\n\n\tconst handleParticipation = async () => {\n\t\tsetBetValue(betValue);\n\t\tsetGMBToken(GMBToken);\n\t\tconst res = await participate(walletAddress, betValue, GMBToken);\n\t\tsetStatus(res.status);\n\t}\n\n\tconst connectWalletPressed = async () => {\n\t\tconst walletResponse = await connectWallet();\n\t\tsetStatus(walletResponse.status);\n\t\tsetWallet(walletResponse.address);\n\t};\n\n\treturn (\n\t\t<div id=\"container\">\n\t\t{walletAddress.length > 0 ? (\n\t\t\t\"Connected: \" +\n\t\t\tString(walletAddress).substring(0, 6) +\n\t\t\t\"...\" +\n\t\t\tString(walletAddress).substring(38)\n\t\t) : (\n\t \t\t<button id=\"walletButton\" onClick={connectWalletPressed}>\n\t\t\t<span>Connect Wallet</span>\n\t \t\t</button>\n\t\t)}\n\t\t<h4 style={{ paddingTop: \"50px\" }}>GMBToken Balance: {tokenBalance}</h4>\n\t\t<h4 style={{ paddingTop: \"50px\" }}>Round Number: {roundNum}</h4>\n\t\t<h4 style={{ paddingTop: \"50px\" }}>CoveragePerGMB: {coveragePerGMB}</h4>\n\t\t<hr></hr>\n\t\t\t<label>Bet Value:\n\t\t\t\t<input \n\t\t\t\ttype=\"text\" \n\t\t\t\tvalue={betValue}\n\t\t\t\tonChange={(e) => setBetValue(e.target.value)}\n\t\t\t\t/>\n\t\t\t</label>\n\t\t\t<label>GMB Token:\n\t\t\t\t<input \n\t\t\t\ttype=\"text\" \n\t\t\t\tvalue={GMBToken}\n\t\t\t\tonChange={(e) => setGMBToken(e.target.value)}\n\t\t\t\t/>\n\t\t\t</label>\n      \t\t<input type=\"submit\" value=\"participate\" onClick={handleParticipation}/>\n\t\t<p id=\"status\">{status}</p>\n\n\t\t</div>\n\t)\n\n\t//the UI of our component\n\t// return (\n\t// \t<div id=\"container\">\n\t// \t\t<img id=\"logo\" src={Ubclogo}></img>\n\t// \t\t<button id=\"walletButton\" onClick={connectWalletPressed}>\n\t// \t\t\t{walletAddress.length > 0 ? (\n\t// \t\t\t\t\"Connected: \" +\n\t// \t\t\t\tString(walletAddress).substring(0, 6) +\n\t// \t\t\t\t\"...\" +\n\t// \t\t\t\tString(walletAddress).substring(38)\n\t// \t\t\t) : (\n\t// \t\t\t\t<span>Connect Wallet</span>\n\t// \t\t\t)}\n\t// \t\t</button>\n\n\t\t\t// <h2 style={{ paddingTop: \"50px\" }}>Token Nmae:</h2>\n\t\t\t// <p>{tokenName}</p>\n\n\t\t\t// <h2 style={{ paddingTop: \"50px\" }}>Balance:</h2>\n\t\t\t// <p>{tokenBalance}</p>\n\n\t// \t\t<h2 style={{ paddingTop: \"18px\" }}>Transfer 1 UBC Token To:</h2>\n\n\t// \t\t<div>\n\t// \t\t\t<input\n\t// \t\t\t\ttype=\"text\"\n\t// \t\t\t\tplaceholder=\"transfer token to:\"\n\t// \t\t\t\tonChange={(e) => setToAddress(e.target.value)}\n\t// \t\t\t\tvalue={toAddress}\n\t// \t\t\t/>\n\t// \t\t\t<p id=\"status\">{status}</p>\n\n\t// \t\t\t<button id=\"publish\" onClick={onUpdatePressed}>\n\t// \t\t\t\tTransfer\n\t// \t\t\t</button>\n\t// \t\t</div>\n\t// \t</div>\n\t// );\n};\n\nexport default TokenTransfer;\n","export default __webpack_public_path__ + \"static/media/ubc-logo.702e190b.png\";","import TokenTransfer from \"./tokenTransfer\";\nimport \"./App.css\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<TokenTransfer></TokenTransfer>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.js';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}